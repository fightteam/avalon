apply plugin: "base"

buildscript {
    // 仓库配置
 	repositories {
        mavenLocal()
        mavenCentral()
        jcenter()

	}
	dependencies {
        classpath 'org.gradle.api.plugins:gradle-tomcat-plugin:1.2.2'
    }
}
// 一些简单的配置参数
// -----------------------------
// jar包版本依赖在gradle.properties中管理
ext {
    gradleScriptDir = "${rootProject.projectDir}/gradle"
}
// 所有项目共同的配置
// -----------------------
// 项目编译参数设置、依赖等等
configure(allprojects) {
    apply plugin: "java"
    apply from: "${gradleScriptDir}/ide.gradle"

    group "org.fightteam.avlon"

    configurations.all {
        // 不缓存模块的改动
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'

        // 使所有的spring framework 库依赖版本统一
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'org.springframework') {
                details.useVersion "$springVersion"
            }
        }
        //排除spring库中使用的common log api
        exclude group: "commons-logging"
        exclude module: "slf4j-log4j12"
    }

    // 项目构建JDK版本
    project.sourceCompatibility = 1.7
    project.targetCompatibility = 1.7

    // 编译参数
    [compileJava, compileTestJava]*.options*.compilerArgs = ["-Xlint:none", "-g"]
    [compileJava, javadoc, compileTestJava]*.options*.encoding = 'UTF-8'

    // 仓库
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://repo.spring.io/libs-snapshot" }
        maven {
            url 'http://repo.spring.io/milestone'
        }
        maven {
            url 'https://raw.github.com/fightteam/Join/mvn-repo'
        }

    }

    dependencies {

    }
}

// 子项目共同的配置
// ----------------------
// 主要是javadoc的生成
configure(subprojects) { subproject ->

    javadoc {
        options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
        options.author = true
        options.encoding = "UTF-8"
        options.header = subproject.name
        //options.overview = "${projectDir}/src/api/overview.html"
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = "sources"
        from sourceSets.main.allJava
    }
    task javadocJar(type: Jar) {
        classifier = "javadoc"
        from javadoc
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}


// 根项目配置
// ---------------------
// 主要是文档等的生成。
configure(rootProject) {
  	description = "Avalon Exporter"


  	// 根项目不生成jar
	configurations.archives.artifacts.clear()


	task api(type: Javadoc) {
	    group = "Documentation"
	    description = "Generates aggregated Javadoc API documentation."
	    title = "${rootProject.description} ${version} API"

	    options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
	    options.author = true
	    options.header = rootProject.description
	    options.overview = "src/api/overview.html"
	    options.splitIndex = true
	    options.encoding = "UTF-8"
        options.locale = "en_US"
        options.linksOffline "http://docs.oracle.com/javase/7/docs/api/", "http://docs.oracle.com/javase/7/docs/api/"
	    options.linksOffline "http://static.springsource.org/spring/docs/3.1.x/javadoc-api/", "http://static.springsource.org/spring/docs/3.1.x/javadoc-api/"
	    options.linksOffline "http://static.springsource.org/spring-data/data-commons/docs/current/api/", "http://static.springsource.org/spring-data/data-commons/docs/current/api/"
        source subprojects.collect { project ->
	      project.sourceSets.main.allJava
	    }

	    destinationDir = new File(buildDir, "api")
	    classpath = files(subprojects.collect { project ->
	      project.sourceSets.main.compileClasspath

	    })
	    maxMemory = "1024m"
	}

	task docsZip(type: Zip) {
	    group = "Distribution"
	    baseName = "avalon"
	    classifier = "docs"
	    description = "Builds -${classifier} archive containing api and reference."
	    from("src/dist") {
			include "changelog.txt"
			include "notice.txt"
	    }
	    from(api) {
			into "api"
	    }
	    from("src/reference") {
	    	into "reference"
	    }
	}

	artifacts {
		archives docsZip
	}

	dependencies {

	}

	
}

task wrapper(type:Wrapper){
	gradleVersion= '1.11'
}