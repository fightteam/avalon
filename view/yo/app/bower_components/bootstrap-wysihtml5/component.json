{
  "name": "bootstrap-wysihtml5",
  "version": "0.0.0",
  "main": [
    "src/bootstrap-wysihtml5.css",
    "src/bootstrap-wysihtml5.js"
  ],
  "dependencies": {
    "wysihtml5": "~0.3.0"
  },
  "gitHead": "283bb8f859977ac1aafb09bee715a1190f8cfd1b",
  "readme": "h1. Overview\r\n\r\nBootstrap-wysihtml5 is a javascript plugin that makes it easy to create simple, beautiful wysiwyg editors with the help of \"wysihtml5\":https://github.com/xing/wysihtml5 and \"Twitter Bootstrap\":http://twitter.github.com/bootstrap/.\r\n\r\nh1. Examples\r\n\r\n* \"http://jhollingworth.github.com/bootstrap-wysihtml5\":http://jhollingworth.github.com/bootstrap-wysihtml5/\r\n\r\nh1. Quick Start\r\n\r\nIf you are using rails use the \"bootstrap-wysihtml5-rails gem\":http://rubygems.org/gems/bootstrap-wysihtml5-rails.\r\n\r\n<pre>\r\ngem install bootstrap-wysihtml5-rails\r\n</pre>\r\n\r\nOtherwise, download \"the latest version of bootstrap-wysihtml5\":https://github.com/jhollingworth/bootstrap-wysihtml5/downloads.\r\n\r\nh2. Files to reference\r\n\r\n<pre>\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/css/bootstrap-wysihtml5.css\"></link>\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/css/bootstrap.min.css\"></link>\r\n<script src=\"js/wysihtml5-0.3.0.js\"></script>\r\n<script src=\"js/jquery-1.7.2.min.js\"></script>\r\n<script src=\"js/bootstrap.min.js\"></script>\r\n<script src=\"js/bootstrap-wysihtml5.js\"></script>\r\n</pre>\r\n\r\nh2. Usage\r\n\r\n<pre>\r\n<textarea id=\"some-textarea\" placeholder=\"Enter text ...\"></textarea>\r\n<script type=\"text/javascript\">\r\n\t$('#some-textarea').wysihtml5();\r\n</script>\r\n</pre>\r\n\r\nYou can get the html generated by getting the value of the text area, e.g. \r\n\r\n<pre>\r\n$('#some-textarea').val();\r\n</pre>\r\n\r\nh1. Advanced\r\n\r\nh2. Options\r\n\r\nAn options object can be passed in to .wysihtml5() to configure the editor:\r\n\r\n<pre>\r\n$('#some-textarea').wysihtml5({someOption: 23, ...})\r\n</pre>\r\n\r\nh3. Buttons\r\n\r\nTo override which buttons to show, set the appropriate flags:\r\n\r\n<pre>\r\n$('#some-textarea').wysihtml5({\r\n\t\"font-styles\": true, //Font styling, e.g. h1, h2, etc. Default true\r\n\t\"emphasis\": true, //Italics, bold, etc. Default true\r\n\t\"lists\": true, //(Un)ordered lists, e.g. Bullets, Numbers. Default true\r\n\t\"html\": false, //Button which allows you to edit the generated HTML. Default false\r\n\t\"link\": true, //Button to insert a link. Default true\r\n\t\"image\": true, //Button to insert an image. Default true,\r\n\t\"color\": false //Button to change color of font  \r\n});\r\n</pre>\r\n\r\nh3. Custom Templates for Toolbar Buttons\r\n\r\nTo define custom templates for buttons, you can submit a customTemplates hash with the new definitions.  Each entry should be a function which expects 'locale' and optional 'options' to manage the translations.\r\n\r\nFor example, the default template used for the editHtml mode button looks like this (with size fetched from the optional 'options')\r\n\r\n<pre>\r\n<li>\r\n  <div class='btn-group'>\r\n    <a class='btn\" + size + \"' data-wysihtml5-action='change_view' title='\" + locale.html.edit + \"'><i class='icon-pencil'></i></a>\"\r\n  </div>\r\n</li>\r\n</pre>\r\n\r\nYou can change it to not use the pencil icon (for example) by defining the custom template like this:\r\n\r\n<pre language='javascript'>\r\nvar myCustomTemplates = {\r\n  html : function(locale) {\r\n    return \"<li>\" +\r\n           \"<div class='btn-group'>\" +\r\n           \"<a class='btn' data-wysihtml5-action='change_view' title='\" + locale.html.edit + \"'>HTML</a>\" +\r\n           \"</div>\" +\r\n           \"</li>\";\r\n  }\r\n}\r\n\r\n// pass in your custom templates on init\r\n$('#some-textarea').wysihtml5({\r\n   customTemplates: myCustomTemplates\r\n});\r\n</pre>\r\n\r\n\r\nThis will override only the toolbar template for html, and all others will use the default.\r\n\r\n\r\nh3. Stylesheets\r\n\r\nIt is possible to supply a number of stylesheets for inclusion in the editor `<iframe>`:\r\n\r\n<pre>\r\n$('#some-textarea').wysihtml5({\r\n\t\"stylesheets\": [\"/path/to/editor.css\"]\r\n});\r\n</pre>\r\n\r\nh3. Events\r\n\r\nWysihtml5 exposes a \"number of events\":https://github.com/xing/wysihtml5/wiki/Events. You can hook into these events when initialising the editor:\r\n\r\n<pre>\r\n$('#some-textarea').wysihtml5({\r\n\t\"events\": {\r\n\t\t\"load\": function() { \r\n\t\t\tconsole.log(\"Loaded!\");\r\n\t\t},\r\n\t\t\"blur\": function() { \r\n\t\t\tconsole.log(\"Blured\");\r\n\t\t}\r\n\t}\r\n});\r\n</pre>\r\n\r\nh3. Shallow copy by default, deep on request\r\n\r\nOptions you pass in will be added to the defaults via a shallow copy.  (see \"jQuery.extend()\":http://api.jquery.com/jQuery.extend/ for details). You can use a deep copy instead (which is probably what you want if you're adding tags or classes to parserRules) via 'deepExtend', as in the parserRules example below.\r\n\r\nh3. Parser Rules\r\n\r\nIf you find the editor is stripping out tags or attributes you need, then you'll want to extend (or replace) parserRules.  This example extends the defaults to allow the <code><strong></code> and <code><em></code> tags, and the class \"middle\":\r\n\r\n<pre>\r\n$('#some-textarea').wysihtml5('deepExtend', {\r\n  parserRules: {\r\n    classes: {\r\n      \"middle\": 1\r\n    },\r\n    tags: {\r\n      strong: {},\r\n      em: {}\r\n    }\r\n  }\r\n});\r\n</pre>\r\n\r\nThere's quite a bit that can be done with parserRules; see \"wysihtml5's advanced parser ruleset\":https://github.com/xing/wysihtml5/blob/master/parser_rules/advanced.js for details.  bootstrap-wysihtml5's default parserRules can be found \"in the source\":https://github.com/jhollingworth/bootstrap-wysihtml5/blob/master/src/bootstrap-wysihtml5.js (just search for 'parserRules' in the file).\r\n\r\nh3. Defaults\r\n\r\nYou can change bootstrap-wysihtml5's defaults by altering:\r\n\r\n<pre>\r\n$.fn.wysihtml5.defaultOptions\r\n</pre>\r\n\r\nThis object has the same structure as the options object you pass in to .wysihtml5().  You can revert to the original defaults by calling:\r\n\r\n<pre>\r\n$(this).wysihtml5('resetDefaults') \r\n</pre> \r\n\r\nOperations on the defaults are not thread-safe; if you're going to change the defaults, you probably want to do it only once, after you load the bootstrap-wysihtml plugin and before you start instantiating your editors.\r\n\r\nh2. The underlying wysihtml5 object\r\n\r\nYou can access the \"wysihtml5 editor object\":https://github.com/xing/wysihtml5 like this:\r\n\r\n<pre>\r\nvar wysihtml5Editor = $('#some-textarea').data(\"wysihtml5\").editor;\r\nwysihtml5Editor.composer.commands.exec(\"bold\");\r\n</pre>\r\n\r\n\r\nh2. I18n\r\n\r\nYou can use Bootstrap-wysihtml5 in other languages. There are some translations available in the src/locales directory. You can include your desired one after the plugin and pass its key to the editor. Example:\r\n\r\n<pre>\r\n<script src=\"src/locales/bootstrap-wysihtml5.pt-BR.js\"></script>\r\n<script type=\"text/javascript\">\r\n  $('#some-textarea').wysihtml5({locale: \"pt-BR\"});\r\n</script>\r\n</pre>\r\n\r\nIt is possible to use custom translations as well. Just add a new key to $.fn.wysihtml5.locale before calling the editor constructor.\r\n",
  "readmeFilename": "readme.textile",
  "_id": "bootstrap-wysihtml5@0.1.0",
  "description": "h1. Overview",
  "commit": "283bb8f859977ac1aafb09bee715a1190f8cfd1b",
  "repository": {
    "type": "git",
    "url": "git://github.com/jhollingworth/bootstrap-wysihtml5.git"
  }
}